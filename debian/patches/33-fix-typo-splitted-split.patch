diff --git a/math/mathcore/inc/Math/KDTree.h b/math/mathcore/inc/Math/KDTree.h
index d682410..ffd19ef 100644
--- a/math/mathcore/inc/Math/KDTree.h
+++ b/math/mathcore/inc/Math/KDTree.h
@@ -278,7 +278,7 @@ namespace ROOT
            void                                    UpdateBoundaries(); 
 
            Bool_t                                  fOwnData;       // terminal node owns the data objects (default = false)
-           eSplitOption                            fSplitOption;   // according to which figure of merit the node is splitted
+           eSplitOption                            fSplitOption;   // according to which figure of merit the node is split
            Double_t                                fBucketSize;    // target number of entries per bucket
            UInt_t                                  fSplitAxis;     // axis at which the next split will occur
            std::vector<const _DataPoint*>          fDataPoints;    // data points in this bucket
diff --git a/tree/tree/src/TEntryListArray.cxx b/tree/tree/src/TEntryListArray.cxx
index 532d74e..2486a3a 100644
--- a/tree/tree/src/TEntryListArray.cxx
+++ b/tree/tree/src/TEntryListArray.cxx
@@ -174,7 +174,7 @@ void TEntryListArray::Add(const TEntryList *elist)
 void TEntryListArray::AddEntriesAndSubLists(const TEntryList *elist)
 {
    // The method that really adds two entry lists with sublists
-   // If lists are splitted (fLists != 0), look for the ones whose trees match and call the method for those lists.
+   // If lists are split (fLists != 0), look for the ones whose trees match and call the method for those lists.
    // Add first the sublists, and then use TEntryList::Add to deal with the entries
 
    // WARNING: cannot call TEntryList::Add in the beginning:
@@ -184,7 +184,7 @@ void TEntryListArray::AddEntriesAndSubLists(const TEntryList *elist)
    // Add to the entries and sublists of this list, the ones from the other list
    if (!elist) return;
 
-   if (fLists) { // This list is splitted
+   if (fLists) { // This list is split
       TEntryListArray* e = 0;
       TIter next(fLists);
       fN = 0; // reset fN to set it to the sum of fN in each list
@@ -193,13 +193,13 @@ void TEntryListArray::AddEntriesAndSubLists(const TEntryList *elist)
          e->AddEntriesAndSubLists(elist);
          fN += e->GetN();
       }
-   } else if (elist->GetLists()) { // The other list is splitted --> will be called only from the previous if
+   } else if (elist->GetLists()) { // The other list is split --> will be called only from the previous if
       TIter next(elist->GetLists());
       TEntryList *e = 0;
       while ((e = (TEntryList*) next())) {
          AddEntriesAndSubLists(e);
       }
-   } else { // None of the lists are splitted
+   } else { // None of the lists are split
       if (strcmp(elist->GetTreeName(), fTreeName.Data()) || strcmp(elist->GetFileName(), fFileName.Data()))
          return; // Lists are for different trees
       const TEntryListArray *elist_array = dynamic_cast< const TEntryListArray *>(elist);
@@ -256,7 +256,7 @@ Int_t TEntryListArray::Contains(Long64_t entry, TTree *tree, Long64_t subentry)
    //When tree is a chain, the entry is assumed to be global index and the local
    //entry is recomputed from the treeoffset information of the chain
 
-   //When subentry != -1, return true if the enter is present and not splitted
+   //When subentry != -1, return true if the enter is present and not split
    //or if the subentry list is found and contains #subentry
 
    if (tree) {
@@ -302,7 +302,7 @@ void TEntryListArray::ConvertToTEntryListArray(TEntryList *e)
    if (e == fCurrent) {
       fCurrent = earray;
    }
-   // If the list has just been splitted, earray will be the first one
+   // If the list has just been split, earray will be the first one
    // and must keep the current sublists
    if (fSubLists) {
       earray->fSubLists = fSubLists;
@@ -612,7 +612,7 @@ void TEntryListArray::Subtract(const TEntryList *elist)
 
    if (!elist) return;
 
-   if (fLists) { // This list is splitted
+   if (fLists) { // This list is split
       TEntryListArray* e = 0;
       TIter next(fLists);
       fN = 0; // reset fN to set it to the sum of fN in each list
@@ -620,13 +620,13 @@ void TEntryListArray::Subtract(const TEntryList *elist)
          e->Subtract(elist);
          fN += e->GetN();
       }
-   } else if (elist->GetLists()) { // The other list is splitted
+   } else if (elist->GetLists()) { // The other list is split
       TIter next(elist->GetLists());
       TEntryList *e = 0;
       while ((e = (TEntryList*) next())) {
          Subtract(e);
       }
-   } else { // None of the lists are splitted
+   } else { // None of the lists are split
       if (strcmp(elist->GetTreeName(), fTreeName.Data()) || strcmp(elist->GetFileName(), fFileName.Data()))
          return; // Lists are for different trees
       const TEntryListArray *elist_array = dynamic_cast< const TEntryListArray *>(elist);
@@ -689,7 +689,7 @@ void TEntryListArray::SetTree(const char *treename, const char *filename)
    TEntryList::SetTree(treename, filename);
    if (fLists && fLists->GetEntries() != nLists) { // fList was created and/or has new additions
       if (nLists == -1) {
-         // The list has just been splitted (fList was created)
+         // The list has just been split (fList was created)
          // There should be two TEntryLists in fLists:
          // must convert both to TEntryListArray
          // and transfer the sublists to the first one
