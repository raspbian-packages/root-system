--- a/config/root-help.el.in
+++ b/config/root-help.el.in
@@ -391,7 +391,7 @@
     (if (file-exists-p source-name) 
 	(error "Source file '%s' already exists - will not overwrite" 
 	       source-name))
-    ;; Check files are writeable 
+    ;; Check files are writable 
     (if (not (file-writable-p header-name)) 
 	(error "Cannot write header file '%s'" header-name))
     (if (not (file-writable-p source-name)) 
--- a/core/base/src/TSystem.cxx
+++ b/core/base/src/TSystem.cxx
@@ -3181,7 +3181,7 @@
          ::Warning("ACLiC","Could not create the directory: %s",
                 build_loc.Data());
       } else {
-         ::Warning("ACLiC","%s is not writeable!",
+         ::Warning("ACLiC","%s is not writable!",
                    build_loc.Data());
       }
       if (emergency_loc == build_dir ) {
--- a/docbook/users-guide/CINT.xml
+++ b/docbook/users-guide/CINT.xml
@@ -620,7 +620,7 @@
 
 <programlisting language="c++">
 root[] <emphasis role="bold"><code>.L readonly/t.C++</code></emphasis>
-Warning in &lt;ACLiC&gt;: /scratch/aclic/subs/./readonly is not writeable!
+Warning in &lt;ACLiC&gt;: /scratch/aclic/subs/./readonly is not writable!
 Warning in &lt;ACLiC&gt;: Output will be written to /tmp
 Info in &lt;TUnixSystem::ACLiC&gt;: creating shared library
 /tmp//scratch/aclic/subs/./readonly/t_C.so
--- a/graf2d/asimage/src/libAfterImage/export.c
+++ b/graf2d/asimage/src/libAfterImage/export.c
@@ -184,7 +184,7 @@
 /* Some helper functions :                                                         */
 
 FILE*
-open_writeable_image_file( const char *path )
+open_writable_image_file( const char *path )
 {
 	FILE *fp = NULL;
 	if ( path )
@@ -290,7 +290,7 @@
            params = &defaults ;
         }
 
-	if ((outfile = open_writeable_image_file( path )) == NULL)
+	if ((outfile = open_writable_image_file( path )) == NULL)
 		return False;
 
     mapped_im = colormap_asimage( im, &cmap, params->xpm.max_colors, params->xpm.dither, params->xpm.opaque_threshold );
@@ -648,7 +648,7 @@
 	if( im == NULL )
 		return False;
 	
-	if ((outfile = open_writeable_image_file( path )) == NULL)
+	if ((outfile = open_writable_image_file( path )) == NULL)
 		return False;
 
 	res = ASImage2png_int ( im, outfile, NULL, NULL, params );
@@ -765,7 +765,7 @@
            params = &defaults ;
         }
 
-	if ((outfile = open_writeable_image_file( path )) == NULL)
+	if ((outfile = open_writable_image_file( path )) == NULL)
 		return False;
 
 	if((imdec = start_image_decoding( NULL /* default visual */ , im,
@@ -1035,7 +1035,7 @@
 			gif = NULL;
 			fclose (infile);
 			infile = NULL;
-			outfile = open_writeable_image_file( path );
+			outfile = open_writable_image_file( path );
 
 			if (outfile)
 				gif = EGifOpenFileHandle(fileno(outfile));
@@ -1077,7 +1077,7 @@
 	if (gif == NULL)
 	{
 		if (outfile == NULL)
-			outfile = open_writeable_image_file(path);
+			outfile = open_writable_image_file(path);
 			
 		if (outfile)
 			if ((gif = EGifOpenFileHandle(fileno(outfile))) == NULL)
--- a/graf2d/win32gdk/gdk/src/gdk/gdkcolor.c
+++ b/graf2d/win32gdk/gdk/src/gdk/gdkcolor.c
@@ -173,11 +173,11 @@
 gboolean
 gdk_colormap_alloc_color(GdkColormap * colormap,
                          GdkColor * color,
-                         gboolean writeable, gboolean best_match)
+                         gboolean writable, gboolean best_match)
 {
    gboolean success;
 
-   gdk_colormap_alloc_colors(colormap, color, 1, writeable, best_match,
+   gdk_colormap_alloc_colors(colormap, color, 1, writable, best_match,
                              &success);
 
    return success;
--- a/graf2d/win32gdk/gdk/src/gdk/gdkcolor.h
+++ b/graf2d/win32gdk/gdk/src/gdk/gdkcolor.h
@@ -42,11 +42,11 @@
    gint gdk_colormap_alloc_colors(GdkColormap * colormap,
                                   GdkColor * colors,
                                   gint ncolors,
-                                  gboolean writeable,
+                                  gboolean writable,
                                   gboolean best_match, gboolean * success);
    gboolean gdk_colormap_alloc_color(GdkColormap * colormap,
                                      GdkColor * color,
-                                     gboolean writeable,
+                                     gboolean writable,
                                      gboolean best_match);
    void gdk_colormap_free_colors(GdkColormap * colormap,
                                  GdkColor * colors, gint ncolors);
--- a/graf2d/win32gdk/gdk/src/gdk/win32/gdkcolor-win32.c
+++ b/graf2d/win32gdk/gdk/src/gdk/win32/gdkcolor-win32.c
@@ -1674,10 +1674,10 @@
 }
 
 static gint
-gdk_colormap_alloc_colors_writeable(GdkColormap * colormap,
+gdk_colormap_alloc_colors_writable(GdkColormap * colormap,
                                     GdkColor * colors,
                                     gint ncolors,
-                                    gboolean writeable,
+                                    gboolean writable,
                                     gboolean best_match,
                                     gboolean * success)
 {
@@ -1706,7 +1706,7 @@
       return i;
    } else {
       pixels = g_new(gulong, ncolors);
-      /* Allocation of a writeable color cells */
+      /* Allocation of a writable color cells */
 
       status = alloc_color_cells(private->xcolormap, FALSE, NULL,
                                  0, pixels, ncolors);
@@ -1728,7 +1728,7 @@
 gdk_colormap_alloc_colors_private(GdkColormap * colormap,
                                   GdkColor * colors,
                                   gint ncolors,
-                                  gboolean writeable,
+                                  gboolean writable,
                                   gboolean best_match, gboolean * success)
 {
    GdkColormapPrivateWin32 *private;
@@ -1801,7 +1801,7 @@
 gdk_colormap_alloc_colors_shared(GdkColormap * colormap,
                                  GdkColor * colors,
                                  gint ncolors,
-                                 gboolean writeable,
+                                 gboolean writable,
                                  gboolean best_match, gboolean * success)
 {
    GdkColormapPrivateWin32 *private;
@@ -1878,7 +1878,7 @@
 gdk_colormap_alloc_colors_pseudocolor(GdkColormap * colormap,
                                       GdkColor * colors,
                                       gint ncolors,
-                                      gboolean writeable,
+                                      gboolean writable,
                                       gboolean best_match,
                                       gboolean * success)
 {
@@ -1909,11 +1909,11 @@
    if (nremaining > 0) {
       if (private->private_val)
          return gdk_colormap_alloc_colors_private(colormap, colors,
-                                                  ncolors, writeable,
+                                                  ncolors, writable,
                                                   best_match, success);
       else
          return gdk_colormap_alloc_colors_shared(colormap, colors, ncolors,
-                                                 writeable, best_match,
+                                                 writable, best_match,
                                                  success);
    } else
       return 0;
@@ -1923,7 +1923,7 @@
 gdk_colormap_alloc_colors(GdkColormap * colormap,
                           GdkColor * colors,
                           gint ncolors,
-                          gboolean writeable,
+                          gboolean writable,
                           gboolean best_match, gboolean * success)
 {
    GdkColormapPrivateWin32 *private;
@@ -1944,13 +1944,13 @@
    switch (private->base.visual->type) {
    case GDK_VISUAL_PSEUDO_COLOR:
    case GDK_VISUAL_GRAYSCALE:
-      if (writeable)
-         return gdk_colormap_alloc_colors_writeable(colormap, colors,
-                                                    ncolors, writeable,
+      if (writable)
+         return gdk_colormap_alloc_colors_writable(colormap, colors,
+                                                    ncolors, writable,
                                                     best_match, success);
       else
          return gdk_colormap_alloc_colors_pseudocolor(colormap, colors,
-                                                      ncolors, writeable,
+                                                      ncolors, writable,
                                                       best_match, success);
       break;
 
--- a/io/doc/TFile/TDirectory.txt
+++ b/io/doc/TFile/TDirectory.txt
@@ -17,7 +17,7 @@
 //       1->.. Title     = lTitle bytes with the title of the object <direcory title> TNamed::fTitle
 //	--------DATA----------------
 //       0->0  Modified  = True if directory has been modified			TDirectory::fModified
-//       1->1  Writeable = True if directory is writeable			TDirectory::fWriteable
+//       1->1  Writable = True if directory is writable			TDirectory::fWriteable
 //       2->5  DatimeC   = Date and time when directory was created		TDirectory::fDatimeC
 //                       | (year-1995)<<26|month<<22|day<<17|hour<<12|minute<<6|second
 //       6->9  DatimeM   = Date and time when directory was last modified	TDirectory::fDatimeM
--- a/io/doc/TFile/TFile.txt
+++ b/io/doc/TFile/TFile.txt
@@ -24,7 +24,7 @@
 //       0->0           lTitle    = Number of bytes in the TFile title			TNamed::fTitle
 //       1->..          Title     = lTitle bytes with the title of the TFile <file title> TNamed::fTitle
 //       0->0           Modified  = True if directory has been modified			TDirectory::fModified
-//       1->1           Writeable = True if directory is writeable				TDirectory::fWriteable
+//       1->1           Writable = True if directory is writable				TDirectory::fWriteable
 //       2->5           DatimeC   = Date and time when directory was created			TDirectory::fDatimeC
 //                       | (year-1995)<<26|month<<22|day<<17|hour<<12|minute<<6|second
 //       6->9           DatimeM   = Date and time when directory was last modified		TDirectory::fDatimeM
--- a/net/rootd/src/rootd.cxx
+++ b/net/rootd/src/rootd.cxx
@@ -148,7 +148,7 @@
 //   Where /var/spool/rootd must match the rootd home directory as      //
 //   specified in the rootd /etc/passwd entry.                          //
 //                                                                      //
-// - To make writeable directories for anonymous do, for example:       //
+// - To make writable directories for anonymous do, for example:       //
 //                                                                      //
 //   mkdir /var/spool/rootd/pub                                         //
 //   chown rootd:rootd /var/spool/rootd/pub                             //
--- a/tree/tree/src/TTreeCloner.cxx
+++ b/tree/tree/src/TTreeCloner.cxx
@@ -156,10 +156,10 @@
       fIsValid = kFALSE;
    } else if (! fToTree->GetDirectory()->IsWritable()) {
       if (fToTree->GetDirectory()==fToTree->GetCurrentFile()) {
-         fWarningMsg.Form("The output TTree (%s) must be associated with a writeable file (%s).",
+         fWarningMsg.Form("The output TTree (%s) must be associated with a writable file (%s).",
                           fToTree->GetName(),fToTree->GetCurrentFile()->GetName());         
       } else {
-         fWarningMsg.Form("The output TTree (%s) must be associated with a writeable directory (%s in %s).",
+         fWarningMsg.Form("The output TTree (%s) must be associated with a writable directory (%s in %s).",
                           fToTree->GetName(),fToTree->GetDirectory()->GetName(),fToTree->GetCurrentFile()->GetName());
       }
       if (!(fOptions & kNoWarnings)) {
--- a/graf2d/asimage/src/libAfterImage/bmp.c
+++ b/graf2d/asimage/src/libAfterImage/bmp.c
@@ -41,7 +41,7 @@
 /* from import.c : */
 FILE* open_image_file( const char *path );
 /* from export.c : */
-FILE* open_writeable_image_file( const char *path );
+FILE* open_writable_image_file( const char *path );
 
 void 
 dib_data_to_scanline( ASScanline *buf, 
@@ -364,7 +364,7 @@
 	FILE *outfile = NULL ;
 	START_TIME(started);
 
-	if ((outfile = open_writeable_image_file( path )) != NULL)
+	if ((outfile = open_writable_image_file( path )) != NULL)
 	{
 		void *bmbits ;
 		BITMAPINFO *bmi = ASImage2DBI( get_default_asvisual(), im, 0, 0, im->width, im->height, &bmbits, 0 );
